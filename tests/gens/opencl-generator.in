#!/bin/bash

if [ "@opencl@" = yes ];
then

# Transforms a text so that it is valid
# to be used as a shell variable name
# Note: it actually calls tr (translate)
# and translates every alphanumeric character
# into an underscore
function tr_sh() {
  echo $(echo -n "$@" | tr -c [:alnum:] '_')
}

common_includes="
-I\@abs_top_srcdir@/src/apis/c \
-I\@abs_top_builddir@/src/apis/c \
-I\@abs_top_srcdir@/src/arch/unix-os \
-I\@abs_top_srcdir@/src/support \
-I\@abs_top_srcdir@/src/core \
-I\@abs_top_srcdir@/src/arch/smp \
-I\@abs_top_srcdir@/src/arch/opencl \
-I\@abs_top_srcdir@/src/arch/spu \
-I\@abs_top_srcdir@/src/arch/opencl \
-I\@abs_top_srcdir@/src/arch/cluster
$END"

VERSIONS="@VERSIONS@"
PLUGINS="@PLUGINS@"

LIBS="-Xlinker --no-as-needed -lnanox-ompss -lnanox -lnanox-c -lnanox-opencl-api -Xlinker --as-needed @opencllibs@"

dynamic_list="--dynamic-list=@abs_top_srcdir@/tests/gens/nanos-exports.def"
#rpath="\
#@abs_top_builddir@/src/arch/opencl/performance/.libs\
#@abs_top_builddir@/src/core/performance/.libs\
#@abs_top_builddir@/src/apis/performance/.libs\
#@abs_top_builddir@/src/pm/performance/.libs\
#"

@is_debug_enabled_TRUE@ debug_CPPFLAGS="@debug_CPPFLAGS@ @cc_dep_CPPFLAGS@ ${common_includes} @openclinc@ @CPPFLAGS@"
@is_debug_enabled_TRUE@ debug_CXXFLAGS="@debug_CXXFLAGS@ @CXXFLAGS@"
@is_debug_enabled_TRUE@ debug_LDFLAGS="@opencllib@ -Xlinker ${dynamic_list} @LDFLAGS@ @cudalib@"
@is_debug_enabled_TRUE@ debug_LIBS="${LIBS}"

@is_instrumentation_debug_enabled_TRUE@ instrumentation_debug_CPPFLAGS="@instrumentation_debug_CPPFLAGS@ @cc_dep_CPPFLAGS@ ${common_includes} @openclinc@ @CPPFLAGS@"
@is_instrumentation_debug_enabled_TRUE@ instrumentation_debug_CXXFLAGS="@instrumentation_debug_CXXFLAGS@ @CXXFLAGS@"
@is_instrumentation_debug_enabled_TRUE@ instrumentation_debug_LDFLAGS="@opencllib@ -Xlinker ${dynamic_list} @LDFLAGS@ @cudalib@"
@is_instrumentation_debug_enabled_TRUE@ instrumentation_debug_LIBS="${LIBS}"

@is_instrumentation_enabled_TRUE@ instrumentation_CPPFLAGS="@instrumentation_CPPFLAGS@ @cc_dep_CPPFLAGS@ ${common_includes} @openclinc@ @CPPFLAGS@"
@is_instrumentation_enabled_TRUE@ instrumentation_CXXFLAGS="@instrumentation_CXXFLAGS@ @CXXFLAGS@"
@is_instrumentation_enabled_TRUE@ instrumentation_LDFLAGS="@opencllib@ -Xlinker ${dynamic_list} @LDFLAGS@ @cudalib@"
@is_instrumentation_enabled_TRUE@ instrumentation_LIBS="${LIBS}"

@is_performance_enabled_TRUE@ performance_CPPFLAGS="@performance_CPPFLAGS@ @cc_dep_CPPFLAGS@ ${common_includes} @openclinc@ @CPPFLAGS@"
@is_performance_enabled_TRUE@ performance_CXXFLAGS="@performance_CXXFLAGS@ @CXXFLAGS@"
@is_performance_enabled_TRUE@ performance_LDFLAGS="@opencllib@ -Xlinker ${dynamic_list} @LDFLAGS@ @cudalib@"
@is_performance_enabled_TRUE@ performance_LIBS="${LIBS}"

# Common to all versions
cat << EOF
test_CC=@CC@
test_CXX=@CXX@
EOF

# Specific to each version
compile_versions=
for version in $VERSIONS; do
  sh_version=$(tr_sh $version)
  compile_versions+="${sh_version} "
  for plugin in $PLUGINS; do
    eval "${sh_version}_LDFLAGS=\"\
-L @abs_top_builddir@/src/${plugin}/${version}/.libs  -Wl,-rpath,@abs_top_builddir@/src/${plugin}/${version}/.libs \
\${${sh_version}_LDFLAGS}\""
  done

  eval "${sh_version}_LDFLAGS=\"\
-L @abs_top_builddir@/src/core/${version}/.libs -Wl,-rpath,@abs_top_builddir@/src/core/${version}/.libs \
-L @abs_top_builddir@/src/pms/${version}/.libs -Wl,-rpath,@abs_top_builddir@/src/pms/${version}/.libs \
-L @abs_top_builddir@/src/apis/${version}/.libs -Wl,-rpath,@abs_top_builddir@/src/apis/${version}/.libs \
@PTHREAD_LIBS@ \
\${${sh_version}_LIBS} \
\${${sh_version}_LDFLAGS}\""

cat << EOF
test_CPPFLAGS_${sh_version}="$(eval echo \${${sh_version}_CPPFLAGS} ${test_CPPFLAGS})"
test_CFLAGS_${sh_version}="$(eval echo \${${sh_version}_CFLAGS} ${test_CFLAGS})"
test_CXXFLAGS_${sh_version}="$(eval echo \${${sh_version}_CXXFLAGS} ${test_CXXFLAGS})"
test_LDFLAGS_${sh_version}="$(eval echo \${${sh_version}_LDFLAGS} \${${sh_version}_LIBS} ${test_LDFLAGS})"
test_PLUGINS_${sh_version}="$(eval echo \${${sh_version}_PLUGINS})"
test_ENV_${sh_version}="$(eval echo \${${sh_version}_ENV} ${test_ENV})"
EOF

done # for version 

cat << EOF
compile_versions="${compile_versions}"
$(@abs_top_srcdir@/tests/gens/config.py -a '--opencl-max-devices=1' -c 1 $*)
EOF

else
cat << EOF
test_ignore=yes
EOF

fi
